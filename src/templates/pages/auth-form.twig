{% extends "base.twig" %}



{% block content %}
<div class="flex flex-col items-center justify-center min-h-screen p-(--space-md)">
  <header class="mb-(--space-lg) text-center">
    <h1 class="text-3xl font-bold mb-(--space-sm)" id="auth-title">Create an Account</h1>
    <p class="italic text-(--color-text-light)" id="auth-subtext">Sign up to get started!</p>
  </header>

  <form id="auth-form" class="w-full max-w-md bg-white p-(--space-lg) rounded-lg shadow-(--shadow-lg)">
    <div id="name-field" class="mb-(--space-md) flex flex-col">
      <label class="mb-(--space-xs) font-medium">Name:</label>
      <input id="name" type="text" class="w-full p-(--space-sm) rounded-md border border-gray-300" />
      <span id="name-error" class="text-red-500 text-sm mt-(--space-xs)"></span>
    </div>

    <div class="mb-(--space-md) flex flex-col">
      <label class="mb-(--space-xs) font-medium">Email:</label>
      <input id="email" type="email" class="w-full p-(--space-sm) rounded-md border border-gray-300" />
      <span id="email-error" class="text-red-500 text-sm mt-(--space-xs)"></span>
    </div>

    <div class="mb-(--space-md) flex flex-col">
      <label class="mb-(--space-xs) font-medium">Password:</label>
      <input id="password" type="password" class="w-full p-(--space-sm) rounded-md border border-gray-300" />
      <span id="password-error" class="text-red-500 text-sm mt-(--space-xs)"></span>
    </div>

    <button type="submit" id="submit-btn" class="w-full bg-(--color-primary-light) text-(--color-text-secondary) p-(--space-sm) rounded-md hover:bg-(--color-primary) transition font-medium">
      Sign Up
    </button>

    <p class="mt-(--space-md) text-center text-(--color-text-light) text-sm">
      Already have an account?
      <button type="button" id="toggle-mode" class="text-(--color-primary-light) font-bold hover:text-(--color-primary) hover:underline ml-(--space-xs)">
        Log In
      </button>
    </p>

   <div id="general-error" class="hidden text-red-600 text-center mt-(--space-sm) p-(--space-sm) bg-red-50 rounded-md border border-red-200"></div>
    <div id="success-msg" class="hidden mt-(--space-sm) p-(--space-sm) rounded-md bg-green-100 text-green-700 text-center font-medium border border-green-200 hidden">
      ✅ Success!
    </div>
  </form>
</div>
{% endblock %}

{% block scripts %}

<script type="module" >

import { AuthContext } from "../js/context/authContext.js";
console.log("auth-form.js loaded");

document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("auth-form");
  const nameField = document.getElementById("name-field");
  const nameInput = document.getElementById("name");
  const emailInput = document.getElementById("email");
  const passwordInput = document.getElementById("password");
  const toggleModeBtn = document.getElementById("toggle-mode");
  const submitBtn = document.getElementById("submit-btn");

  const nameError = document.getElementById("name-error");
  const emailError = document.getElementById("email-error");
  const passwordError = document.getElementById("password-error");
  const generalError = document.getElementById("general-error");
  const successMsg = document.getElementById("success-msg");
  const authTitle = document.getElementById("auth-title");
  const authSubtext = document.getElementById("auth-subtext");

  let isSignUp = true;

  // Redirect if already authenticated
  if (AuthContext.isAuthenticated()) {
    window.location.href = "/dashboard";
  }

  const generateFakeToken = () =>
    "token_" + Math.random().toString(36).substring(2) + Date.now().toString(36);

  const validate = () => {
    let isValid = true;
    nameError.textContent = "";
    emailError.textContent = "";
    passwordError.textContent = "";

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (isSignUp && !nameInput.value.trim()) {
      nameError.textContent = "Name required";
      isValid = false;
    }
    if (!emailInput.value.trim() || !emailRegex.test(emailInput.value)) {
      emailError.textContent = "Valid email required";
      isValid = false;
    }
    if (!passwordInput.value.trim() || passwordInput.value.length < 6) {
      passwordError.textContent = "Password min 6 chars";
      isValid = false;
    }
    return isValid;
  };

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    if (!validate()) return;

    try{
      if (isSignUp) {
        const newUser = {
          name: nameInput.value,
          email: emailInput.value,
          password: passwordInput.value,
          token: generateFakeToken(),
        };
        AuthContext.signup(newUser);
        successMsg.textContent = "✅ Account created!";
      } else {
        AuthContext.login(emailInput.value, passwordInput.value);
        successMsg.textContent = "✅ Logged in successfully!";
      }

      successMsg.classList.remove("hidden");
      generalError.classList.add("hidden");

      setTimeout(() => {
        successMsg.classList.add("hidden");
        window.location.href = "/dashboard";
      }, 1500);

      form.reset();
    } catch (err) {
       generalError.textContent = err.message || "An error occurred";
      generalError.classList.remove("hidden");
      successMsg.classList.add("hidden");
    }
  });

  // Toggle Sign Up / Log In mode
  toggleModeBtn.addEventListener("click", () => {
    isSignUp = !isSignUp;

    if (isSignUp) {
      nameField.classList.remove("hidden");
      authTitle.textContent = "Create an Account";
      authSubtext.textContent = "Sign up to get started!";
      toggleModeBtn.textContent = "Log In";
      submitBtn.textContent = "Sign Up"
    } else {
      nameField.classList.add("hidden");
      authTitle.textContent = "Welcome Back!";
      authSubtext.textContent = "Log in to continue!";
      toggleModeBtn.textContent = "Sign Up";
      submitBtn.textContent = "Log in"

    }

    // Reset form & errors
    form.reset();
    nameError.textContent = "";
    emailError.textContent = "";
    passwordError.textContent = "";
    generalError.classList.add("hidden");
    successMsg.classList.add("hidden");
  });
});

</script>
{% endblock %}
